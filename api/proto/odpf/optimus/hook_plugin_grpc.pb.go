// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package optimus

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HookPluginClient is the client API for HookPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HookPluginClient interface {
	// GetHookSchema provides basic working details for this hook
	GetHookSchema(ctx context.Context, in *GetHookSchema_Request, opts ...grpc.CallOption) (*GetHookSchema_Response, error)
	// GetHookQuestions list down all the cli inputs required to generate spec files
	// name used for question will be directly mapped to DefaultHookConfig() parameters
	GetHookQuestions(ctx context.Context, in *GetHookQuestions_Request, opts ...grpc.CallOption) (*GetHookQuestions_Response, error)
	ValidateHookQuestion(ctx context.Context, in *ValidateHookQuestion_Request, opts ...grpc.CallOption) (*ValidateHookQuestion_Response, error)
	// DefaultHookConfig are a set of configuration which will be embedded in job
	// specification. These configs can be requested by the docker container before
	// execution
	// It will be generated based on results of GetHookQuestions, it also inherit
	// its parent task config
	// if DryRun is true in PluginOptions, should not throw error for missing inputs
	DefaultHookConfig(ctx context.Context, in *DefaultHookConfig_Request, opts ...grpc.CallOption) (*DefaultHookConfig_Response, error)
	// DefaultHookAssets are a set of files which will be embedded in job
	// specification in assets folder. These configs can be requested by the
	// docker container before execution.
	// if DryRun is true in PluginOptions, should not throw error for missing inputs
	DefaultHookAssets(ctx context.Context, in *DefaultHookAssets_Request, opts ...grpc.CallOption) (*DefaultHookAssets_Response, error)
}

type hookPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewHookPluginClient(cc grpc.ClientConnInterface) HookPluginClient {
	return &hookPluginClient{cc}
}

func (c *hookPluginClient) GetHookSchema(ctx context.Context, in *GetHookSchema_Request, opts ...grpc.CallOption) (*GetHookSchema_Response, error) {
	out := new(GetHookSchema_Response)
	err := c.cc.Invoke(ctx, "/odpf.optimus.HookPlugin/GetHookSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hookPluginClient) GetHookQuestions(ctx context.Context, in *GetHookQuestions_Request, opts ...grpc.CallOption) (*GetHookQuestions_Response, error) {
	out := new(GetHookQuestions_Response)
	err := c.cc.Invoke(ctx, "/odpf.optimus.HookPlugin/GetHookQuestions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hookPluginClient) ValidateHookQuestion(ctx context.Context, in *ValidateHookQuestion_Request, opts ...grpc.CallOption) (*ValidateHookQuestion_Response, error) {
	out := new(ValidateHookQuestion_Response)
	err := c.cc.Invoke(ctx, "/odpf.optimus.HookPlugin/ValidateHookQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hookPluginClient) DefaultHookConfig(ctx context.Context, in *DefaultHookConfig_Request, opts ...grpc.CallOption) (*DefaultHookConfig_Response, error) {
	out := new(DefaultHookConfig_Response)
	err := c.cc.Invoke(ctx, "/odpf.optimus.HookPlugin/DefaultHookConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hookPluginClient) DefaultHookAssets(ctx context.Context, in *DefaultHookAssets_Request, opts ...grpc.CallOption) (*DefaultHookAssets_Response, error) {
	out := new(DefaultHookAssets_Response)
	err := c.cc.Invoke(ctx, "/odpf.optimus.HookPlugin/DefaultHookAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HookPluginServer is the server API for HookPlugin service.
// All implementations must embed UnimplementedHookPluginServer
// for forward compatibility
type HookPluginServer interface {
	// GetHookSchema provides basic working details for this hook
	GetHookSchema(context.Context, *GetHookSchema_Request) (*GetHookSchema_Response, error)
	// GetHookQuestions list down all the cli inputs required to generate spec files
	// name used for question will be directly mapped to DefaultHookConfig() parameters
	GetHookQuestions(context.Context, *GetHookQuestions_Request) (*GetHookQuestions_Response, error)
	ValidateHookQuestion(context.Context, *ValidateHookQuestion_Request) (*ValidateHookQuestion_Response, error)
	// DefaultHookConfig are a set of configuration which will be embedded in job
	// specification. These configs can be requested by the docker container before
	// execution
	// It will be generated based on results of GetHookQuestions, it also inherit
	// its parent task config
	// if DryRun is true in PluginOptions, should not throw error for missing inputs
	DefaultHookConfig(context.Context, *DefaultHookConfig_Request) (*DefaultHookConfig_Response, error)
	// DefaultHookAssets are a set of files which will be embedded in job
	// specification in assets folder. These configs can be requested by the
	// docker container before execution.
	// if DryRun is true in PluginOptions, should not throw error for missing inputs
	DefaultHookAssets(context.Context, *DefaultHookAssets_Request) (*DefaultHookAssets_Response, error)
	mustEmbedUnimplementedHookPluginServer()
}

// UnimplementedHookPluginServer must be embedded to have forward compatible implementations.
type UnimplementedHookPluginServer struct {
}

func (UnimplementedHookPluginServer) GetHookSchema(context.Context, *GetHookSchema_Request) (*GetHookSchema_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHookSchema not implemented")
}
func (UnimplementedHookPluginServer) GetHookQuestions(context.Context, *GetHookQuestions_Request) (*GetHookQuestions_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHookQuestions not implemented")
}
func (UnimplementedHookPluginServer) ValidateHookQuestion(context.Context, *ValidateHookQuestion_Request) (*ValidateHookQuestion_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateHookQuestion not implemented")
}
func (UnimplementedHookPluginServer) DefaultHookConfig(context.Context, *DefaultHookConfig_Request) (*DefaultHookConfig_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DefaultHookConfig not implemented")
}
func (UnimplementedHookPluginServer) DefaultHookAssets(context.Context, *DefaultHookAssets_Request) (*DefaultHookAssets_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DefaultHookAssets not implemented")
}
func (UnimplementedHookPluginServer) mustEmbedUnimplementedHookPluginServer() {}

// UnsafeHookPluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HookPluginServer will
// result in compilation errors.
type UnsafeHookPluginServer interface {
	mustEmbedUnimplementedHookPluginServer()
}

func RegisterHookPluginServer(s grpc.ServiceRegistrar, srv HookPluginServer) {
	s.RegisterService(&HookPlugin_ServiceDesc, srv)
}

func _HookPlugin_GetHookSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHookSchema_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HookPluginServer).GetHookSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.optimus.HookPlugin/GetHookSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HookPluginServer).GetHookSchema(ctx, req.(*GetHookSchema_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _HookPlugin_GetHookQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHookQuestions_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HookPluginServer).GetHookQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.optimus.HookPlugin/GetHookQuestions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HookPluginServer).GetHookQuestions(ctx, req.(*GetHookQuestions_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _HookPlugin_ValidateHookQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateHookQuestion_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HookPluginServer).ValidateHookQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.optimus.HookPlugin/ValidateHookQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HookPluginServer).ValidateHookQuestion(ctx, req.(*ValidateHookQuestion_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _HookPlugin_DefaultHookConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultHookConfig_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HookPluginServer).DefaultHookConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.optimus.HookPlugin/DefaultHookConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HookPluginServer).DefaultHookConfig(ctx, req.(*DefaultHookConfig_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _HookPlugin_DefaultHookAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultHookAssets_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HookPluginServer).DefaultHookAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.optimus.HookPlugin/DefaultHookAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HookPluginServer).DefaultHookAssets(ctx, req.(*DefaultHookAssets_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// HookPlugin_ServiceDesc is the grpc.ServiceDesc for HookPlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HookPlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "odpf.optimus.HookPlugin",
	HandlerType: (*HookPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHookSchema",
			Handler:    _HookPlugin_GetHookSchema_Handler,
		},
		{
			MethodName: "GetHookQuestions",
			Handler:    _HookPlugin_GetHookQuestions_Handler,
		},
		{
			MethodName: "ValidateHookQuestion",
			Handler:    _HookPlugin_ValidateHookQuestion_Handler,
		},
		{
			MethodName: "DefaultHookConfig",
			Handler:    _HookPlugin_DefaultHookConfig_Handler,
		},
		{
			MethodName: "DefaultHookAssets",
			Handler:    _HookPlugin_DefaultHookAssets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "odpf/optimus/hook_plugin.proto",
}
