// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package optimus

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RuntimeServiceClient is the client API for RuntimeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RuntimeServiceClient interface {
	// server ping with version
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
	// DeployJobSpecification schedules jobs for execution
	// returns a stream of messages which can be used to track the progress
	// of deployments. Message containing ack are status events other are progress
	// events
	// State of the world request
	DeployJobSpecification(ctx context.Context, in *DeployJobSpecificationRequest, opts ...grpc.CallOption) (RuntimeService_DeployJobSpecificationClient, error)
	// CreateJobSpecification registers a new job for a namespace which belongs to a project
	CreateJobSpecification(ctx context.Context, in *CreateJobSpecificationRequest, opts ...grpc.CallOption) (*CreateJobSpecificationResponse, error)
	// ReadJobSpecification reads a provided job spec of a namespace
	ReadJobSpecification(ctx context.Context, in *ReadJobSpecificationRequest, opts ...grpc.CallOption) (*ReadJobSpecificationResponse, error)
	// DeleteJobSpecification deletes a job spec of a namespace
	DeleteJobSpecification(ctx context.Context, in *DeleteJobSpecificationRequest, opts ...grpc.CallOption) (*DeleteJobSpecificationResponse, error)
	// ListJobSpecification returns list of jobs created in a project
	ListJobSpecification(ctx context.Context, in *ListJobSpecificationRequest, opts ...grpc.CallOption) (*ListJobSpecificationResponse, error)
	// DumpJobSpecification returns compiled representation of the job in a scheduler
	// consumable form
	DumpJobSpecification(ctx context.Context, in *DumpJobSpecificationRequest, opts ...grpc.CallOption) (*DumpJobSpecificationResponse, error)
	// CheckJobSpecification checks if a job specification is valid
	CheckJobSpecification(ctx context.Context, in *CheckJobSpecificationRequest, opts ...grpc.CallOption) (*CheckJobSpecificationResponse, error)
	// CheckJobSpecifications checks if the job specifications are valid
	CheckJobSpecifications(ctx context.Context, in *CheckJobSpecificationsRequest, opts ...grpc.CallOption) (RuntimeService_CheckJobSpecificationsClient, error)
	// RegisterProject creates a new optimus project
	RegisterProject(ctx context.Context, in *RegisterProjectRequest, opts ...grpc.CallOption) (*RegisterProjectResponse, error)
	// RegisterProjectNamespace creates a new namespace for a project
	RegisterProjectNamespace(ctx context.Context, in *RegisterProjectNamespaceRequest, opts ...grpc.CallOption) (*RegisterProjectNamespaceResponse, error)
	// RegisterSecret creates a new secret of a project
	RegisterSecret(ctx context.Context, in *RegisterSecretRequest, opts ...grpc.CallOption) (*RegisterSecretResponse, error)
	// ListProjects returns list of registered projects and configurations
	ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error)
	// ListProjectNamespaces returns list of namespaces of a project
	ListProjectNamespaces(ctx context.Context, in *ListProjectNamespacesRequest, opts ...grpc.CallOption) (*ListProjectNamespacesResponse, error)
	// RegisterInstance is an internal admin command used during task/hook execution
	// to pull task/hook compiled configuration and assets.
	RegisterInstance(ctx context.Context, in *RegisterInstanceRequest, opts ...grpc.CallOption) (*RegisterInstanceResponse, error)
	// JobStatus returns the current and past run status of jobs
	JobStatus(ctx context.Context, in *JobStatusRequest, opts ...grpc.CallOption) (*JobStatusResponse, error)
	// GetWindow provides the start and end dates provided a scheduled date
	// of the execution window
	GetWindow(ctx context.Context, in *GetWindowRequest, opts ...grpc.CallOption) (*GetWindowResponse, error)
	// DeployResourceSpecification migrate all resource specifications of a datastore in project
	DeployResourceSpecification(ctx context.Context, in *DeployResourceSpecificationRequest, opts ...grpc.CallOption) (RuntimeService_DeployResourceSpecificationClient, error)
	// ListResourceSpecification lists all resource specifications of a datastore in project
	ListResourceSpecification(ctx context.Context, in *ListResourceSpecificationRequest, opts ...grpc.CallOption) (*ListResourceSpecificationResponse, error)
	// Datastore CRUD
	CreateResource(ctx context.Context, in *CreateResourceRequest, opts ...grpc.CallOption) (*CreateResourceResponse, error)
	ReadResource(ctx context.Context, in *ReadResourceRequest, opts ...grpc.CallOption) (*ReadResourceResponse, error)
	UpdateResource(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error)
	ReplayDryRun(ctx context.Context, in *ReplayRequest, opts ...grpc.CallOption) (*ReplayDryRunResponse, error)
	Replay(ctx context.Context, in *ReplayRequest, opts ...grpc.CallOption) (*ReplayResponse, error)
}

type runtimeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRuntimeServiceClient(cc grpc.ClientConnInterface) RuntimeServiceClient {
	return &runtimeServiceClient{cc}
}

func (c *runtimeServiceClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, "/odpf.optimus.RuntimeService/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) DeployJobSpecification(ctx context.Context, in *DeployJobSpecificationRequest, opts ...grpc.CallOption) (RuntimeService_DeployJobSpecificationClient, error) {
	stream, err := c.cc.NewStream(ctx, &RuntimeService_ServiceDesc.Streams[0], "/odpf.optimus.RuntimeService/DeployJobSpecification", opts...)
	if err != nil {
		return nil, err
	}
	x := &runtimeServiceDeployJobSpecificationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RuntimeService_DeployJobSpecificationClient interface {
	Recv() (*DeployJobSpecificationResponse, error)
	grpc.ClientStream
}

type runtimeServiceDeployJobSpecificationClient struct {
	grpc.ClientStream
}

func (x *runtimeServiceDeployJobSpecificationClient) Recv() (*DeployJobSpecificationResponse, error) {
	m := new(DeployJobSpecificationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *runtimeServiceClient) CreateJobSpecification(ctx context.Context, in *CreateJobSpecificationRequest, opts ...grpc.CallOption) (*CreateJobSpecificationResponse, error) {
	out := new(CreateJobSpecificationResponse)
	err := c.cc.Invoke(ctx, "/odpf.optimus.RuntimeService/CreateJobSpecification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) ReadJobSpecification(ctx context.Context, in *ReadJobSpecificationRequest, opts ...grpc.CallOption) (*ReadJobSpecificationResponse, error) {
	out := new(ReadJobSpecificationResponse)
	err := c.cc.Invoke(ctx, "/odpf.optimus.RuntimeService/ReadJobSpecification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) DeleteJobSpecification(ctx context.Context, in *DeleteJobSpecificationRequest, opts ...grpc.CallOption) (*DeleteJobSpecificationResponse, error) {
	out := new(DeleteJobSpecificationResponse)
	err := c.cc.Invoke(ctx, "/odpf.optimus.RuntimeService/DeleteJobSpecification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) ListJobSpecification(ctx context.Context, in *ListJobSpecificationRequest, opts ...grpc.CallOption) (*ListJobSpecificationResponse, error) {
	out := new(ListJobSpecificationResponse)
	err := c.cc.Invoke(ctx, "/odpf.optimus.RuntimeService/ListJobSpecification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) DumpJobSpecification(ctx context.Context, in *DumpJobSpecificationRequest, opts ...grpc.CallOption) (*DumpJobSpecificationResponse, error) {
	out := new(DumpJobSpecificationResponse)
	err := c.cc.Invoke(ctx, "/odpf.optimus.RuntimeService/DumpJobSpecification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) CheckJobSpecification(ctx context.Context, in *CheckJobSpecificationRequest, opts ...grpc.CallOption) (*CheckJobSpecificationResponse, error) {
	out := new(CheckJobSpecificationResponse)
	err := c.cc.Invoke(ctx, "/odpf.optimus.RuntimeService/CheckJobSpecification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) CheckJobSpecifications(ctx context.Context, in *CheckJobSpecificationsRequest, opts ...grpc.CallOption) (RuntimeService_CheckJobSpecificationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &RuntimeService_ServiceDesc.Streams[1], "/odpf.optimus.RuntimeService/CheckJobSpecifications", opts...)
	if err != nil {
		return nil, err
	}
	x := &runtimeServiceCheckJobSpecificationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RuntimeService_CheckJobSpecificationsClient interface {
	Recv() (*CheckJobSpecificationsResponse, error)
	grpc.ClientStream
}

type runtimeServiceCheckJobSpecificationsClient struct {
	grpc.ClientStream
}

func (x *runtimeServiceCheckJobSpecificationsClient) Recv() (*CheckJobSpecificationsResponse, error) {
	m := new(CheckJobSpecificationsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *runtimeServiceClient) RegisterProject(ctx context.Context, in *RegisterProjectRequest, opts ...grpc.CallOption) (*RegisterProjectResponse, error) {
	out := new(RegisterProjectResponse)
	err := c.cc.Invoke(ctx, "/odpf.optimus.RuntimeService/RegisterProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) RegisterProjectNamespace(ctx context.Context, in *RegisterProjectNamespaceRequest, opts ...grpc.CallOption) (*RegisterProjectNamespaceResponse, error) {
	out := new(RegisterProjectNamespaceResponse)
	err := c.cc.Invoke(ctx, "/odpf.optimus.RuntimeService/RegisterProjectNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) RegisterSecret(ctx context.Context, in *RegisterSecretRequest, opts ...grpc.CallOption) (*RegisterSecretResponse, error) {
	out := new(RegisterSecretResponse)
	err := c.cc.Invoke(ctx, "/odpf.optimus.RuntimeService/RegisterSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error) {
	out := new(ListProjectsResponse)
	err := c.cc.Invoke(ctx, "/odpf.optimus.RuntimeService/ListProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) ListProjectNamespaces(ctx context.Context, in *ListProjectNamespacesRequest, opts ...grpc.CallOption) (*ListProjectNamespacesResponse, error) {
	out := new(ListProjectNamespacesResponse)
	err := c.cc.Invoke(ctx, "/odpf.optimus.RuntimeService/ListProjectNamespaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) RegisterInstance(ctx context.Context, in *RegisterInstanceRequest, opts ...grpc.CallOption) (*RegisterInstanceResponse, error) {
	out := new(RegisterInstanceResponse)
	err := c.cc.Invoke(ctx, "/odpf.optimus.RuntimeService/RegisterInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) JobStatus(ctx context.Context, in *JobStatusRequest, opts ...grpc.CallOption) (*JobStatusResponse, error) {
	out := new(JobStatusResponse)
	err := c.cc.Invoke(ctx, "/odpf.optimus.RuntimeService/JobStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) GetWindow(ctx context.Context, in *GetWindowRequest, opts ...grpc.CallOption) (*GetWindowResponse, error) {
	out := new(GetWindowResponse)
	err := c.cc.Invoke(ctx, "/odpf.optimus.RuntimeService/GetWindow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) DeployResourceSpecification(ctx context.Context, in *DeployResourceSpecificationRequest, opts ...grpc.CallOption) (RuntimeService_DeployResourceSpecificationClient, error) {
	stream, err := c.cc.NewStream(ctx, &RuntimeService_ServiceDesc.Streams[2], "/odpf.optimus.RuntimeService/DeployResourceSpecification", opts...)
	if err != nil {
		return nil, err
	}
	x := &runtimeServiceDeployResourceSpecificationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RuntimeService_DeployResourceSpecificationClient interface {
	Recv() (*DeployResourceSpecificationResponse, error)
	grpc.ClientStream
}

type runtimeServiceDeployResourceSpecificationClient struct {
	grpc.ClientStream
}

func (x *runtimeServiceDeployResourceSpecificationClient) Recv() (*DeployResourceSpecificationResponse, error) {
	m := new(DeployResourceSpecificationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *runtimeServiceClient) ListResourceSpecification(ctx context.Context, in *ListResourceSpecificationRequest, opts ...grpc.CallOption) (*ListResourceSpecificationResponse, error) {
	out := new(ListResourceSpecificationResponse)
	err := c.cc.Invoke(ctx, "/odpf.optimus.RuntimeService/ListResourceSpecification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) CreateResource(ctx context.Context, in *CreateResourceRequest, opts ...grpc.CallOption) (*CreateResourceResponse, error) {
	out := new(CreateResourceResponse)
	err := c.cc.Invoke(ctx, "/odpf.optimus.RuntimeService/CreateResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) ReadResource(ctx context.Context, in *ReadResourceRequest, opts ...grpc.CallOption) (*ReadResourceResponse, error) {
	out := new(ReadResourceResponse)
	err := c.cc.Invoke(ctx, "/odpf.optimus.RuntimeService/ReadResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) UpdateResource(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error) {
	out := new(UpdateResourceResponse)
	err := c.cc.Invoke(ctx, "/odpf.optimus.RuntimeService/UpdateResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) ReplayDryRun(ctx context.Context, in *ReplayRequest, opts ...grpc.CallOption) (*ReplayDryRunResponse, error) {
	out := new(ReplayDryRunResponse)
	err := c.cc.Invoke(ctx, "/odpf.optimus.RuntimeService/ReplayDryRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) Replay(ctx context.Context, in *ReplayRequest, opts ...grpc.CallOption) (*ReplayResponse, error) {
	out := new(ReplayResponse)
	err := c.cc.Invoke(ctx, "/odpf.optimus.RuntimeService/Replay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RuntimeServiceServer is the server API for RuntimeService service.
// All implementations must embed UnimplementedRuntimeServiceServer
// for forward compatibility
type RuntimeServiceServer interface {
	// server ping with version
	Version(context.Context, *VersionRequest) (*VersionResponse, error)
	// DeployJobSpecification schedules jobs for execution
	// returns a stream of messages which can be used to track the progress
	// of deployments. Message containing ack are status events other are progress
	// events
	// State of the world request
	DeployJobSpecification(*DeployJobSpecificationRequest, RuntimeService_DeployJobSpecificationServer) error
	// CreateJobSpecification registers a new job for a namespace which belongs to a project
	CreateJobSpecification(context.Context, *CreateJobSpecificationRequest) (*CreateJobSpecificationResponse, error)
	// ReadJobSpecification reads a provided job spec of a namespace
	ReadJobSpecification(context.Context, *ReadJobSpecificationRequest) (*ReadJobSpecificationResponse, error)
	// DeleteJobSpecification deletes a job spec of a namespace
	DeleteJobSpecification(context.Context, *DeleteJobSpecificationRequest) (*DeleteJobSpecificationResponse, error)
	// ListJobSpecification returns list of jobs created in a project
	ListJobSpecification(context.Context, *ListJobSpecificationRequest) (*ListJobSpecificationResponse, error)
	// DumpJobSpecification returns compiled representation of the job in a scheduler
	// consumable form
	DumpJobSpecification(context.Context, *DumpJobSpecificationRequest) (*DumpJobSpecificationResponse, error)
	// CheckJobSpecification checks if a job specification is valid
	CheckJobSpecification(context.Context, *CheckJobSpecificationRequest) (*CheckJobSpecificationResponse, error)
	// CheckJobSpecifications checks if the job specifications are valid
	CheckJobSpecifications(*CheckJobSpecificationsRequest, RuntimeService_CheckJobSpecificationsServer) error
	// RegisterProject creates a new optimus project
	RegisterProject(context.Context, *RegisterProjectRequest) (*RegisterProjectResponse, error)
	// RegisterProjectNamespace creates a new namespace for a project
	RegisterProjectNamespace(context.Context, *RegisterProjectNamespaceRequest) (*RegisterProjectNamespaceResponse, error)
	// RegisterSecret creates a new secret of a project
	RegisterSecret(context.Context, *RegisterSecretRequest) (*RegisterSecretResponse, error)
	// ListProjects returns list of registered projects and configurations
	ListProjects(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error)
	// ListProjectNamespaces returns list of namespaces of a project
	ListProjectNamespaces(context.Context, *ListProjectNamespacesRequest) (*ListProjectNamespacesResponse, error)
	// RegisterInstance is an internal admin command used during task/hook execution
	// to pull task/hook compiled configuration and assets.
	RegisterInstance(context.Context, *RegisterInstanceRequest) (*RegisterInstanceResponse, error)
	// JobStatus returns the current and past run status of jobs
	JobStatus(context.Context, *JobStatusRequest) (*JobStatusResponse, error)
	// GetWindow provides the start and end dates provided a scheduled date
	// of the execution window
	GetWindow(context.Context, *GetWindowRequest) (*GetWindowResponse, error)
	// DeployResourceSpecification migrate all resource specifications of a datastore in project
	DeployResourceSpecification(*DeployResourceSpecificationRequest, RuntimeService_DeployResourceSpecificationServer) error
	// ListResourceSpecification lists all resource specifications of a datastore in project
	ListResourceSpecification(context.Context, *ListResourceSpecificationRequest) (*ListResourceSpecificationResponse, error)
	// Datastore CRUD
	CreateResource(context.Context, *CreateResourceRequest) (*CreateResourceResponse, error)
	ReadResource(context.Context, *ReadResourceRequest) (*ReadResourceResponse, error)
	UpdateResource(context.Context, *UpdateResourceRequest) (*UpdateResourceResponse, error)
	ReplayDryRun(context.Context, *ReplayRequest) (*ReplayDryRunResponse, error)
	Replay(context.Context, *ReplayRequest) (*ReplayResponse, error)
	mustEmbedUnimplementedRuntimeServiceServer()
}

// UnimplementedRuntimeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRuntimeServiceServer struct {
}

func (UnimplementedRuntimeServiceServer) Version(context.Context, *VersionRequest) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedRuntimeServiceServer) DeployJobSpecification(*DeployJobSpecificationRequest, RuntimeService_DeployJobSpecificationServer) error {
	return status.Errorf(codes.Unimplemented, "method DeployJobSpecification not implemented")
}
func (UnimplementedRuntimeServiceServer) CreateJobSpecification(context.Context, *CreateJobSpecificationRequest) (*CreateJobSpecificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJobSpecification not implemented")
}
func (UnimplementedRuntimeServiceServer) ReadJobSpecification(context.Context, *ReadJobSpecificationRequest) (*ReadJobSpecificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadJobSpecification not implemented")
}
func (UnimplementedRuntimeServiceServer) DeleteJobSpecification(context.Context, *DeleteJobSpecificationRequest) (*DeleteJobSpecificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJobSpecification not implemented")
}
func (UnimplementedRuntimeServiceServer) ListJobSpecification(context.Context, *ListJobSpecificationRequest) (*ListJobSpecificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJobSpecification not implemented")
}
func (UnimplementedRuntimeServiceServer) DumpJobSpecification(context.Context, *DumpJobSpecificationRequest) (*DumpJobSpecificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DumpJobSpecification not implemented")
}
func (UnimplementedRuntimeServiceServer) CheckJobSpecification(context.Context, *CheckJobSpecificationRequest) (*CheckJobSpecificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckJobSpecification not implemented")
}
func (UnimplementedRuntimeServiceServer) CheckJobSpecifications(*CheckJobSpecificationsRequest, RuntimeService_CheckJobSpecificationsServer) error {
	return status.Errorf(codes.Unimplemented, "method CheckJobSpecifications not implemented")
}
func (UnimplementedRuntimeServiceServer) RegisterProject(context.Context, *RegisterProjectRequest) (*RegisterProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterProject not implemented")
}
func (UnimplementedRuntimeServiceServer) RegisterProjectNamespace(context.Context, *RegisterProjectNamespaceRequest) (*RegisterProjectNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterProjectNamespace not implemented")
}
func (UnimplementedRuntimeServiceServer) RegisterSecret(context.Context, *RegisterSecretRequest) (*RegisterSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterSecret not implemented")
}
func (UnimplementedRuntimeServiceServer) ListProjects(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjects not implemented")
}
func (UnimplementedRuntimeServiceServer) ListProjectNamespaces(context.Context, *ListProjectNamespacesRequest) (*ListProjectNamespacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectNamespaces not implemented")
}
func (UnimplementedRuntimeServiceServer) RegisterInstance(context.Context, *RegisterInstanceRequest) (*RegisterInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterInstance not implemented")
}
func (UnimplementedRuntimeServiceServer) JobStatus(context.Context, *JobStatusRequest) (*JobStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobStatus not implemented")
}
func (UnimplementedRuntimeServiceServer) GetWindow(context.Context, *GetWindowRequest) (*GetWindowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWindow not implemented")
}
func (UnimplementedRuntimeServiceServer) DeployResourceSpecification(*DeployResourceSpecificationRequest, RuntimeService_DeployResourceSpecificationServer) error {
	return status.Errorf(codes.Unimplemented, "method DeployResourceSpecification not implemented")
}
func (UnimplementedRuntimeServiceServer) ListResourceSpecification(context.Context, *ListResourceSpecificationRequest) (*ListResourceSpecificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResourceSpecification not implemented")
}
func (UnimplementedRuntimeServiceServer) CreateResource(context.Context, *CreateResourceRequest) (*CreateResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResource not implemented")
}
func (UnimplementedRuntimeServiceServer) ReadResource(context.Context, *ReadResourceRequest) (*ReadResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadResource not implemented")
}
func (UnimplementedRuntimeServiceServer) UpdateResource(context.Context, *UpdateResourceRequest) (*UpdateResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResource not implemented")
}
func (UnimplementedRuntimeServiceServer) ReplayDryRun(context.Context, *ReplayRequest) (*ReplayDryRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplayDryRun not implemented")
}
func (UnimplementedRuntimeServiceServer) Replay(context.Context, *ReplayRequest) (*ReplayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Replay not implemented")
}
func (UnimplementedRuntimeServiceServer) mustEmbedUnimplementedRuntimeServiceServer() {}

// UnsafeRuntimeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RuntimeServiceServer will
// result in compilation errors.
type UnsafeRuntimeServiceServer interface {
	mustEmbedUnimplementedRuntimeServiceServer()
}

func RegisterRuntimeServiceServer(s grpc.ServiceRegistrar, srv RuntimeServiceServer) {
	s.RegisterService(&RuntimeService_ServiceDesc, srv)
}

func _RuntimeService_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.optimus.RuntimeService/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_DeployJobSpecification_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeployJobSpecificationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RuntimeServiceServer).DeployJobSpecification(m, &runtimeServiceDeployJobSpecificationServer{stream})
}

type RuntimeService_DeployJobSpecificationServer interface {
	Send(*DeployJobSpecificationResponse) error
	grpc.ServerStream
}

type runtimeServiceDeployJobSpecificationServer struct {
	grpc.ServerStream
}

func (x *runtimeServiceDeployJobSpecificationServer) Send(m *DeployJobSpecificationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RuntimeService_CreateJobSpecification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJobSpecificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).CreateJobSpecification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.optimus.RuntimeService/CreateJobSpecification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).CreateJobSpecification(ctx, req.(*CreateJobSpecificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_ReadJobSpecification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadJobSpecificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).ReadJobSpecification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.optimus.RuntimeService/ReadJobSpecification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).ReadJobSpecification(ctx, req.(*ReadJobSpecificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_DeleteJobSpecification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteJobSpecificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).DeleteJobSpecification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.optimus.RuntimeService/DeleteJobSpecification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).DeleteJobSpecification(ctx, req.(*DeleteJobSpecificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_ListJobSpecification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListJobSpecificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).ListJobSpecification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.optimus.RuntimeService/ListJobSpecification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).ListJobSpecification(ctx, req.(*ListJobSpecificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_DumpJobSpecification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DumpJobSpecificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).DumpJobSpecification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.optimus.RuntimeService/DumpJobSpecification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).DumpJobSpecification(ctx, req.(*DumpJobSpecificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_CheckJobSpecification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckJobSpecificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).CheckJobSpecification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.optimus.RuntimeService/CheckJobSpecification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).CheckJobSpecification(ctx, req.(*CheckJobSpecificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_CheckJobSpecifications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CheckJobSpecificationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RuntimeServiceServer).CheckJobSpecifications(m, &runtimeServiceCheckJobSpecificationsServer{stream})
}

type RuntimeService_CheckJobSpecificationsServer interface {
	Send(*CheckJobSpecificationsResponse) error
	grpc.ServerStream
}

type runtimeServiceCheckJobSpecificationsServer struct {
	grpc.ServerStream
}

func (x *runtimeServiceCheckJobSpecificationsServer) Send(m *CheckJobSpecificationsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RuntimeService_RegisterProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).RegisterProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.optimus.RuntimeService/RegisterProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).RegisterProject(ctx, req.(*RegisterProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_RegisterProjectNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterProjectNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).RegisterProjectNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.optimus.RuntimeService/RegisterProjectNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).RegisterProjectNamespace(ctx, req.(*RegisterProjectNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_RegisterSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).RegisterSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.optimus.RuntimeService/RegisterSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).RegisterSecret(ctx, req.(*RegisterSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.optimus.RuntimeService/ListProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).ListProjects(ctx, req.(*ListProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_ListProjectNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectNamespacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).ListProjectNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.optimus.RuntimeService/ListProjectNamespaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).ListProjectNamespaces(ctx, req.(*ListProjectNamespacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_RegisterInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).RegisterInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.optimus.RuntimeService/RegisterInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).RegisterInstance(ctx, req.(*RegisterInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_JobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).JobStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.optimus.RuntimeService/JobStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).JobStatus(ctx, req.(*JobStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_GetWindow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWindowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).GetWindow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.optimus.RuntimeService/GetWindow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).GetWindow(ctx, req.(*GetWindowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_DeployResourceSpecification_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeployResourceSpecificationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RuntimeServiceServer).DeployResourceSpecification(m, &runtimeServiceDeployResourceSpecificationServer{stream})
}

type RuntimeService_DeployResourceSpecificationServer interface {
	Send(*DeployResourceSpecificationResponse) error
	grpc.ServerStream
}

type runtimeServiceDeployResourceSpecificationServer struct {
	grpc.ServerStream
}

func (x *runtimeServiceDeployResourceSpecificationServer) Send(m *DeployResourceSpecificationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RuntimeService_ListResourceSpecification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResourceSpecificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).ListResourceSpecification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.optimus.RuntimeService/ListResourceSpecification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).ListResourceSpecification(ctx, req.(*ListResourceSpecificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_CreateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).CreateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.optimus.RuntimeService/CreateResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).CreateResource(ctx, req.(*CreateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_ReadResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).ReadResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.optimus.RuntimeService/ReadResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).ReadResource(ctx, req.(*ReadResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_UpdateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).UpdateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.optimus.RuntimeService/UpdateResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).UpdateResource(ctx, req.(*UpdateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_ReplayDryRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).ReplayDryRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.optimus.RuntimeService/ReplayDryRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).ReplayDryRun(ctx, req.(*ReplayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_Replay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).Replay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.optimus.RuntimeService/Replay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).Replay(ctx, req.(*ReplayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RuntimeService_ServiceDesc is the grpc.ServiceDesc for RuntimeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RuntimeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "odpf.optimus.RuntimeService",
	HandlerType: (*RuntimeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _RuntimeService_Version_Handler,
		},
		{
			MethodName: "CreateJobSpecification",
			Handler:    _RuntimeService_CreateJobSpecification_Handler,
		},
		{
			MethodName: "ReadJobSpecification",
			Handler:    _RuntimeService_ReadJobSpecification_Handler,
		},
		{
			MethodName: "DeleteJobSpecification",
			Handler:    _RuntimeService_DeleteJobSpecification_Handler,
		},
		{
			MethodName: "ListJobSpecification",
			Handler:    _RuntimeService_ListJobSpecification_Handler,
		},
		{
			MethodName: "DumpJobSpecification",
			Handler:    _RuntimeService_DumpJobSpecification_Handler,
		},
		{
			MethodName: "CheckJobSpecification",
			Handler:    _RuntimeService_CheckJobSpecification_Handler,
		},
		{
			MethodName: "RegisterProject",
			Handler:    _RuntimeService_RegisterProject_Handler,
		},
		{
			MethodName: "RegisterProjectNamespace",
			Handler:    _RuntimeService_RegisterProjectNamespace_Handler,
		},
		{
			MethodName: "RegisterSecret",
			Handler:    _RuntimeService_RegisterSecret_Handler,
		},
		{
			MethodName: "ListProjects",
			Handler:    _RuntimeService_ListProjects_Handler,
		},
		{
			MethodName: "ListProjectNamespaces",
			Handler:    _RuntimeService_ListProjectNamespaces_Handler,
		},
		{
			MethodName: "RegisterInstance",
			Handler:    _RuntimeService_RegisterInstance_Handler,
		},
		{
			MethodName: "JobStatus",
			Handler:    _RuntimeService_JobStatus_Handler,
		},
		{
			MethodName: "GetWindow",
			Handler:    _RuntimeService_GetWindow_Handler,
		},
		{
			MethodName: "ListResourceSpecification",
			Handler:    _RuntimeService_ListResourceSpecification_Handler,
		},
		{
			MethodName: "CreateResource",
			Handler:    _RuntimeService_CreateResource_Handler,
		},
		{
			MethodName: "ReadResource",
			Handler:    _RuntimeService_ReadResource_Handler,
		},
		{
			MethodName: "UpdateResource",
			Handler:    _RuntimeService_UpdateResource_Handler,
		},
		{
			MethodName: "ReplayDryRun",
			Handler:    _RuntimeService_ReplayDryRun_Handler,
		},
		{
			MethodName: "Replay",
			Handler:    _RuntimeService_Replay_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DeployJobSpecification",
			Handler:       _RuntimeService_DeployJobSpecification_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CheckJobSpecifications",
			Handler:       _RuntimeService_CheckJobSpecifications_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeployResourceSpecification",
			Handler:       _RuntimeService_DeployResourceSpecification_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "odpf/optimus/runtime_service.proto",
}
