// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package optimus

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TaskPluginClient is the client API for TaskPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskPluginClient interface {
	// GetTaskSchema provides basic working details for this task
	GetTaskSchema(ctx context.Context, in *GetTaskSchema_Request, opts ...grpc.CallOption) (*GetTaskSchema_Response, error)
	// GetTaskQuestions list down all the cli inputs required to generate spec files
	// name used for question will be directly mapped to DefaultTaskConfig() parameters
	GetTaskQuestions(ctx context.Context, in *GetTaskQuestions_Request, opts ...grpc.CallOption) (*GetTaskQuestions_Response, error)
	ValidateTaskQuestion(ctx context.Context, in *ValidateTaskQuestion_Request, opts ...grpc.CallOption) (*ValidateTaskQuestion_Response, error)
	// DefaultTaskConfig are a set of configuration which will be embedded in job
	// specification. These configs can be requested by the docker container before
	// execution
	// they will be generated based on results of GetTaskQuestions
	// if DryRun is true in PluginOptions, should not throw error for missing inputs
	DefaultTaskConfig(ctx context.Context, in *DefaultTaskConfig_Request, opts ...grpc.CallOption) (*DefaultTaskConfig_Response, error)
	// DefaultTaskAssets are a set of files which will be embedded in job
	// specification in assets folder. These configs can be requested by the
	// docker container before execution.
	// if DryRun is true in PluginOptions, should not throw error for missing inputs
	DefaultTaskAssets(ctx context.Context, in *DefaultTaskAssets_Request, opts ...grpc.CallOption) (*DefaultTaskAssets_Response, error)
	// CompileTaskAssets overrides the default asset compilation behaviour
	CompileTaskAssets(ctx context.Context, in *CompileTaskAssets_Request, opts ...grpc.CallOption) (*CompileTaskAssets_Response, error)
	// GenerateTaskDestination derive destination from config and assets
	GenerateTaskDestination(ctx context.Context, in *GenerateTaskDestination_Request, opts ...grpc.CallOption) (*GenerateTaskDestination_Response, error)
	// GenerateTaskDependencies returns names of job destination on which this unit
	// is dependent on
	GenerateTaskDependencies(ctx context.Context, in *GenerateTaskDependencies_Request, opts ...grpc.CallOption) (*GenerateTaskDependencies_Response, error)
}

type taskPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskPluginClient(cc grpc.ClientConnInterface) TaskPluginClient {
	return &taskPluginClient{cc}
}

func (c *taskPluginClient) GetTaskSchema(ctx context.Context, in *GetTaskSchema_Request, opts ...grpc.CallOption) (*GetTaskSchema_Response, error) {
	out := new(GetTaskSchema_Response)
	err := c.cc.Invoke(ctx, "/odpf.optimus.TaskPlugin/GetTaskSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskPluginClient) GetTaskQuestions(ctx context.Context, in *GetTaskQuestions_Request, opts ...grpc.CallOption) (*GetTaskQuestions_Response, error) {
	out := new(GetTaskQuestions_Response)
	err := c.cc.Invoke(ctx, "/odpf.optimus.TaskPlugin/GetTaskQuestions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskPluginClient) ValidateTaskQuestion(ctx context.Context, in *ValidateTaskQuestion_Request, opts ...grpc.CallOption) (*ValidateTaskQuestion_Response, error) {
	out := new(ValidateTaskQuestion_Response)
	err := c.cc.Invoke(ctx, "/odpf.optimus.TaskPlugin/ValidateTaskQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskPluginClient) DefaultTaskConfig(ctx context.Context, in *DefaultTaskConfig_Request, opts ...grpc.CallOption) (*DefaultTaskConfig_Response, error) {
	out := new(DefaultTaskConfig_Response)
	err := c.cc.Invoke(ctx, "/odpf.optimus.TaskPlugin/DefaultTaskConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskPluginClient) DefaultTaskAssets(ctx context.Context, in *DefaultTaskAssets_Request, opts ...grpc.CallOption) (*DefaultTaskAssets_Response, error) {
	out := new(DefaultTaskAssets_Response)
	err := c.cc.Invoke(ctx, "/odpf.optimus.TaskPlugin/DefaultTaskAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskPluginClient) CompileTaskAssets(ctx context.Context, in *CompileTaskAssets_Request, opts ...grpc.CallOption) (*CompileTaskAssets_Response, error) {
	out := new(CompileTaskAssets_Response)
	err := c.cc.Invoke(ctx, "/odpf.optimus.TaskPlugin/CompileTaskAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskPluginClient) GenerateTaskDestination(ctx context.Context, in *GenerateTaskDestination_Request, opts ...grpc.CallOption) (*GenerateTaskDestination_Response, error) {
	out := new(GenerateTaskDestination_Response)
	err := c.cc.Invoke(ctx, "/odpf.optimus.TaskPlugin/GenerateTaskDestination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskPluginClient) GenerateTaskDependencies(ctx context.Context, in *GenerateTaskDependencies_Request, opts ...grpc.CallOption) (*GenerateTaskDependencies_Response, error) {
	out := new(GenerateTaskDependencies_Response)
	err := c.cc.Invoke(ctx, "/odpf.optimus.TaskPlugin/GenerateTaskDependencies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskPluginServer is the server API for TaskPlugin service.
// All implementations must embed UnimplementedTaskPluginServer
// for forward compatibility
type TaskPluginServer interface {
	// GetTaskSchema provides basic working details for this task
	GetTaskSchema(context.Context, *GetTaskSchema_Request) (*GetTaskSchema_Response, error)
	// GetTaskQuestions list down all the cli inputs required to generate spec files
	// name used for question will be directly mapped to DefaultTaskConfig() parameters
	GetTaskQuestions(context.Context, *GetTaskQuestions_Request) (*GetTaskQuestions_Response, error)
	ValidateTaskQuestion(context.Context, *ValidateTaskQuestion_Request) (*ValidateTaskQuestion_Response, error)
	// DefaultTaskConfig are a set of configuration which will be embedded in job
	// specification. These configs can be requested by the docker container before
	// execution
	// they will be generated based on results of GetTaskQuestions
	// if DryRun is true in PluginOptions, should not throw error for missing inputs
	DefaultTaskConfig(context.Context, *DefaultTaskConfig_Request) (*DefaultTaskConfig_Response, error)
	// DefaultTaskAssets are a set of files which will be embedded in job
	// specification in assets folder. These configs can be requested by the
	// docker container before execution.
	// if DryRun is true in PluginOptions, should not throw error for missing inputs
	DefaultTaskAssets(context.Context, *DefaultTaskAssets_Request) (*DefaultTaskAssets_Response, error)
	// CompileTaskAssets overrides the default asset compilation behaviour
	CompileTaskAssets(context.Context, *CompileTaskAssets_Request) (*CompileTaskAssets_Response, error)
	// GenerateTaskDestination derive destination from config and assets
	GenerateTaskDestination(context.Context, *GenerateTaskDestination_Request) (*GenerateTaskDestination_Response, error)
	// GenerateTaskDependencies returns names of job destination on which this unit
	// is dependent on
	GenerateTaskDependencies(context.Context, *GenerateTaskDependencies_Request) (*GenerateTaskDependencies_Response, error)
	mustEmbedUnimplementedTaskPluginServer()
}

// UnimplementedTaskPluginServer must be embedded to have forward compatible implementations.
type UnimplementedTaskPluginServer struct {
}

func (UnimplementedTaskPluginServer) GetTaskSchema(context.Context, *GetTaskSchema_Request) (*GetTaskSchema_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskSchema not implemented")
}
func (UnimplementedTaskPluginServer) GetTaskQuestions(context.Context, *GetTaskQuestions_Request) (*GetTaskQuestions_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskQuestions not implemented")
}
func (UnimplementedTaskPluginServer) ValidateTaskQuestion(context.Context, *ValidateTaskQuestion_Request) (*ValidateTaskQuestion_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateTaskQuestion not implemented")
}
func (UnimplementedTaskPluginServer) DefaultTaskConfig(context.Context, *DefaultTaskConfig_Request) (*DefaultTaskConfig_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DefaultTaskConfig not implemented")
}
func (UnimplementedTaskPluginServer) DefaultTaskAssets(context.Context, *DefaultTaskAssets_Request) (*DefaultTaskAssets_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DefaultTaskAssets not implemented")
}
func (UnimplementedTaskPluginServer) CompileTaskAssets(context.Context, *CompileTaskAssets_Request) (*CompileTaskAssets_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompileTaskAssets not implemented")
}
func (UnimplementedTaskPluginServer) GenerateTaskDestination(context.Context, *GenerateTaskDestination_Request) (*GenerateTaskDestination_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateTaskDestination not implemented")
}
func (UnimplementedTaskPluginServer) GenerateTaskDependencies(context.Context, *GenerateTaskDependencies_Request) (*GenerateTaskDependencies_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateTaskDependencies not implemented")
}
func (UnimplementedTaskPluginServer) mustEmbedUnimplementedTaskPluginServer() {}

// UnsafeTaskPluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskPluginServer will
// result in compilation errors.
type UnsafeTaskPluginServer interface {
	mustEmbedUnimplementedTaskPluginServer()
}

func RegisterTaskPluginServer(s grpc.ServiceRegistrar, srv TaskPluginServer) {
	s.RegisterService(&TaskPlugin_ServiceDesc, srv)
}

func _TaskPlugin_GetTaskSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskSchema_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskPluginServer).GetTaskSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.optimus.TaskPlugin/GetTaskSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskPluginServer).GetTaskSchema(ctx, req.(*GetTaskSchema_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskPlugin_GetTaskQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskQuestions_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskPluginServer).GetTaskQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.optimus.TaskPlugin/GetTaskQuestions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskPluginServer).GetTaskQuestions(ctx, req.(*GetTaskQuestions_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskPlugin_ValidateTaskQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateTaskQuestion_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskPluginServer).ValidateTaskQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.optimus.TaskPlugin/ValidateTaskQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskPluginServer).ValidateTaskQuestion(ctx, req.(*ValidateTaskQuestion_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskPlugin_DefaultTaskConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultTaskConfig_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskPluginServer).DefaultTaskConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.optimus.TaskPlugin/DefaultTaskConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskPluginServer).DefaultTaskConfig(ctx, req.(*DefaultTaskConfig_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskPlugin_DefaultTaskAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultTaskAssets_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskPluginServer).DefaultTaskAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.optimus.TaskPlugin/DefaultTaskAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskPluginServer).DefaultTaskAssets(ctx, req.(*DefaultTaskAssets_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskPlugin_CompileTaskAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompileTaskAssets_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskPluginServer).CompileTaskAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.optimus.TaskPlugin/CompileTaskAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskPluginServer).CompileTaskAssets(ctx, req.(*CompileTaskAssets_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskPlugin_GenerateTaskDestination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateTaskDestination_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskPluginServer).GenerateTaskDestination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.optimus.TaskPlugin/GenerateTaskDestination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskPluginServer).GenerateTaskDestination(ctx, req.(*GenerateTaskDestination_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskPlugin_GenerateTaskDependencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateTaskDependencies_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskPluginServer).GenerateTaskDependencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/odpf.optimus.TaskPlugin/GenerateTaskDependencies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskPluginServer).GenerateTaskDependencies(ctx, req.(*GenerateTaskDependencies_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskPlugin_ServiceDesc is the grpc.ServiceDesc for TaskPlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskPlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "odpf.optimus.TaskPlugin",
	HandlerType: (*TaskPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTaskSchema",
			Handler:    _TaskPlugin_GetTaskSchema_Handler,
		},
		{
			MethodName: "GetTaskQuestions",
			Handler:    _TaskPlugin_GetTaskQuestions_Handler,
		},
		{
			MethodName: "ValidateTaskQuestion",
			Handler:    _TaskPlugin_ValidateTaskQuestion_Handler,
		},
		{
			MethodName: "DefaultTaskConfig",
			Handler:    _TaskPlugin_DefaultTaskConfig_Handler,
		},
		{
			MethodName: "DefaultTaskAssets",
			Handler:    _TaskPlugin_DefaultTaskAssets_Handler,
		},
		{
			MethodName: "CompileTaskAssets",
			Handler:    _TaskPlugin_CompileTaskAssets_Handler,
		},
		{
			MethodName: "GenerateTaskDestination",
			Handler:    _TaskPlugin_GenerateTaskDestination_Handler,
		},
		{
			MethodName: "GenerateTaskDependencies",
			Handler:    _TaskPlugin_GenerateTaskDependencies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "odpf/optimus/task_plugin.proto",
}
